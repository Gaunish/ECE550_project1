// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2021 12:03:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          skeleton
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module skeleton_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg reset;
// wires                                               
wire [11:0] address_dmem_test;
wire [4:0] alucode_test;
wire [31:0] aluresult_test;
wire [4:0] ctrl_readRegA_test;
wire [4:0] ctrl_readRegB_test;
wire ctrl_writeEnable_test;
wire [31:0] data_writeReg_test;
wire dmem_clock;
wire [31:0] dmem_data_test;
wire imem_clock;
wire [31:0] operandA_test;
wire [31:0] operandB_test;
wire [11:0] pc_test;
wire processor_clock;
wire [31:0] q_dmem_test;
wire [31:0] q_imem_test;
wire regfile_clock;
wire wren_test;

// assign statements (if any)                          
skeleton i1 (
// port map - connection between master ports and signals/registers   
	.address_dmem_test(address_dmem_test),
	.alucode_test(alucode_test),
	.aluresult_test(aluresult_test),
	.clock(clock),
	.ctrl_readRegA_test(ctrl_readRegA_test),
	.ctrl_readRegB_test(ctrl_readRegB_test),
	.ctrl_writeEnable_test(ctrl_writeEnable_test),
	.data_writeReg_test(data_writeReg_test),
	.dmem_clock(dmem_clock),
	.dmem_data_test(dmem_data_test),
	.imem_clock(imem_clock),
	.operandA_test(operandA_test),
	.operandB_test(operandB_test),
	.pc_test(pc_test),
	.processor_clock(processor_clock),
	.q_dmem_test(q_dmem_test),
	.q_imem_test(q_imem_test),
	.regfile_clock(regfile_clock),
	.reset(reset),
	.wren_test(wren_test)
);
initial 
begin 
#5000000 $stop;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

