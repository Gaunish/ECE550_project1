// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/17/2021 11:10:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pc_counter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pc_counter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [11:0] pc;
reg rst;
// wires                                               
wire [11:0] new_pc;

// assign statements (if any)                          
pc_counter i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.new_pc(new_pc),
	.pc(pc),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// pc[ 11 ]
initial
begin
	pc[11] = 1'b0;
end 
// pc[ 10 ]
initial
begin
	pc[10] = 1'b0;
end 
// pc[ 9 ]
initial
begin
	pc[9] = 1'b0;
end 
// pc[ 8 ]
initial
begin
	pc[8] = 1'b0;
end 
// pc[ 7 ]
initial
begin
	pc[7] = 1'b0;
end 
// pc[ 6 ]
initial
begin
	pc[6] = 1'b0;
end 
// pc[ 5 ]
initial
begin
	pc[5] = 1'b0;
end 
// pc[ 4 ]
initial
begin
	pc[4] = 1'b0;
end 
// pc[ 3 ]
initial
begin
	pc[3] = 1'b0;
end 
// pc[ 2 ]
initial
begin
	pc[2] = 1'b0;
end 
// pc[ 1 ]
initial
begin
	pc[1] = 1'b0;
end 
// pc[ 0 ]
initial
begin
	pc[0] = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 
endmodule

