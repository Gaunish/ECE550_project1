// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/03/2021 02:53:09"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg [31:0] d;
reg en;
reg first;
// wires                                               
wire [31:0] out;

// assign statements (if any)                          
register i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr(clr),
	.d(d),
	.en(en),
	.first(first),
	.out(out)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// d[ 31 ]
initial
begin
	d[31] = 1'b0;
	d[31] = #240000 1'b1;
	d[31] = #160000 1'b0;
	d[31] = #240000 1'b1;
	d[31] = #80000 1'b0;
	d[31] = #80000 1'b1;
	d[31] = #80000 1'b0;
	d[31] = #80000 1'b1;
end 
// d[ 30 ]
initial
begin
	d[30] = 1'b1;
	d[30] = #80000 1'b0;
	d[30] = #160000 1'b1;
	d[30] = #160000 1'b0;
	d[30] = #80000 1'b1;
	d[30] = #320000 1'b0;
end 
// d[ 29 ]
initial
begin
	d[29] = 1'b0;
	d[29] = #80000 1'b1;
	d[29] = #240000 1'b0;
	d[29] = #480000 1'b1;
	d[29] = #80000 1'b0;
	d[29] = #80000 1'b1;
end 
// d[ 28 ]
initial
begin
	d[28] = 1'b0;
	d[28] = #160000 1'b1;
	d[28] = #80000 1'b0;
	d[28] = #80000 1'b1;
	d[28] = #160000 1'b0;
	d[28] = #400000 1'b1;
	d[28] = #80000 1'b0;
end 
// d[ 27 ]
initial
begin
	d[27] = 1'b0;
	d[27] = #160000 1'b1;
	d[27] = #80000 1'b0;
	d[27] = #400000 1'b1;
	d[27] = #160000 1'b0;
	d[27] = #160000 1'b1;
end 
// d[ 26 ]
initial
begin
	d[26] = 1'b0;
	d[26] = #160000 1'b1;
	d[26] = #80000 1'b0;
	d[26] = #240000 1'b1;
	d[26] = #80000 1'b0;
	d[26] = #240000 1'b1;
	d[26] = #160000 1'b0;
end 
// d[ 25 ]
initial
begin
	d[25] = 1'b1;
	d[25] = #160000 1'b0;
	d[25] = #160000 1'b1;
	d[25] = #80000 1'b0;
	d[25] = #240000 1'b1;
	d[25] = #80000 1'b0;
	d[25] = #80000 1'b1;
	d[25] = #80000 1'b0;
	d[25] = #80000 1'b1;
end 
// d[ 24 ]
initial
begin
	d[24] = 1'b1;
	d[24] = #240000 1'b0;
	d[24] = #80000 1'b1;
	d[24] = #80000 1'b0;
	d[24] = #80000 1'b1;
	d[24] = #80000 1'b0;
	d[24] = #80000 1'b1;
	d[24] = #240000 1'b0;
end 
// d[ 23 ]
initial
begin
	d[23] = 1'b0;
	d[23] = #80000 1'b1;
	d[23] = #160000 1'b0;
	d[23] = #80000 1'b1;
	d[23] = #240000 1'b0;
	d[23] = #80000 1'b1;
	d[23] = #80000 1'b0;
	d[23] = #80000 1'b1;
	d[23] = #80000 1'b0;
	d[23] = #80000 1'b1;
end 
// d[ 22 ]
initial
begin
	d[22] = 1'b0;
	d[22] = #80000 1'b1;
	d[22] = #80000 1'b0;
	d[22] = #240000 1'b1;
	d[22] = #160000 1'b0;
	d[22] = #80000 1'b1;
	d[22] = #160000 1'b0;
	d[22] = #160000 1'b1;
end 
// d[ 21 ]
initial
begin
	d[21] = 1'b1;
	d[21] = #320000 1'b0;
	d[21] = #80000 1'b1;
	d[21] = #160000 1'b0;
	d[21] = #160000 1'b1;
	d[21] = #80000 1'b0;
	d[21] = #80000 1'b1;
	d[21] = #80000 1'b0;
end 
// d[ 20 ]
initial
begin
	d[20] = 1'b1;
	d[20] = #80000 1'b0;
	d[20] = #80000 1'b1;
	d[20] = #80000 1'b0;
	d[20] = #80000 1'b1;
	d[20] = #160000 1'b0;
	d[20] = #160000 1'b1;
	d[20] = #160000 1'b0;
	d[20] = #80000 1'b1;
	d[20] = #80000 1'b0;
end 
// d[ 19 ]
initial
begin
	d[19] = 1'b1;
	d[19] = #240000 1'b0;
	d[19] = #80000 1'b1;
	d[19] = #80000 1'b0;
	d[19] = #240000 1'b1;
	d[19] = #80000 1'b0;
	d[19] = #160000 1'b1;
	d[19] = #80000 1'b0;
end 
// d[ 18 ]
initial
begin
	d[18] = 1'b1;
	d[18] = #320000 1'b0;
	d[18] = #80000 1'b1;
	d[18] = #160000 1'b0;
	d[18] = #80000 1'b1;
	d[18] = #160000 1'b0;
end 
// d[ 17 ]
initial
begin
	d[17] = 1'b0;
	d[17] = #160000 1'b1;
	d[17] = #80000 1'b0;
	d[17] = #80000 1'b1;
	d[17] = #160000 1'b0;
	d[17] = #80000 1'b1;
	d[17] = #80000 1'b0;
	d[17] = #320000 1'b1;
end 
// d[ 16 ]
initial
begin
	d[16] = 1'b1;
	d[16] = #160000 1'b0;
	d[16] = #240000 1'b1;
	d[16] = #160000 1'b0;
	d[16] = #80000 1'b1;
	d[16] = #160000 1'b0;
	d[16] = #80000 1'b1;
end 
// d[ 15 ]
initial
begin
	d[15] = 1'b0;
	d[15] = #240000 1'b1;
	d[15] = #80000 1'b0;
	d[15] = #160000 1'b1;
	d[15] = #80000 1'b0;
	d[15] = #320000 1'b1;
	d[15] = #80000 1'b0;
end 
// d[ 14 ]
initial
begin
	d[14] = 1'b1;
	d[14] = #80000 1'b0;
	d[14] = #240000 1'b1;
	d[14] = #80000 1'b0;
	d[14] = #80000 1'b1;
	d[14] = #480000 1'b0;
end 
// d[ 13 ]
initial
begin
	d[13] = 1'b0;
	d[13] = #160000 1'b1;
	d[13] = #160000 1'b0;
	d[13] = #320000 1'b1;
	d[13] = #80000 1'b0;
	d[13] = #80000 1'b1;
	d[13] = #80000 1'b0;
end 
// d[ 12 ]
initial
begin
	d[12] = 1'b0;
	d[12] = #80000 1'b1;
	d[12] = #160000 1'b0;
	d[12] = #80000 1'b1;
	d[12] = #80000 1'b0;
	d[12] = #80000 1'b1;
	d[12] = #80000 1'b0;
	d[12] = #80000 1'b1;
	d[12] = #320000 1'b0;
end 
// d[ 11 ]
initial
begin
	d[11] = 1'b0;
	d[11] = #80000 1'b1;
	d[11] = #160000 1'b0;
	d[11] = #80000 1'b1;
	d[11] = #240000 1'b0;
	d[11] = #80000 1'b1;
	d[11] = #160000 1'b0;
	d[11] = #80000 1'b1;
	d[11] = #80000 1'b0;
end 
// d[ 10 ]
initial
begin
	d[10] = 1'b1;
	d[10] = #480000 1'b0;
	d[10] = #80000 1'b1;
	d[10] = #240000 1'b0;
	d[10] = #160000 1'b1;
end 
// d[ 9 ]
initial
begin
	d[9] = 1'b1;
	d[9] = #160000 1'b0;
	d[9] = #160000 1'b1;
	d[9] = #320000 1'b0;
	d[9] = #160000 1'b1;
end 
// d[ 8 ]
initial
begin
	d[8] = 1'b0;
	d[8] = #80000 1'b1;
	d[8] = #400000 1'b0;
	d[8] = #240000 1'b1;
	d[8] = #80000 1'b0;
	d[8] = #160000 1'b1;
end 
// d[ 7 ]
initial
begin
	d[7] = 1'b0;
	d[7] = #240000 1'b1;
	d[7] = #160000 1'b0;
	d[7] = #320000 1'b1;
end 
// d[ 6 ]
initial
begin
	d[6] = 1'b1;
	d[6] = #160000 1'b0;
	d[6] = #240000 1'b1;
	d[6] = #80000 1'b0;
	d[6] = #160000 1'b1;
	d[6] = #80000 1'b0;
	d[6] = #80000 1'b1;
	d[6] = #80000 1'b0;
end 
// d[ 5 ]
initial
begin
	d[5] = 1'b0;
	d[5] = #240000 1'b1;
	d[5] = #80000 1'b0;
	d[5] = #80000 1'b1;
	d[5] = #160000 1'b0;
	d[5] = #80000 1'b1;
	d[5] = #240000 1'b0;
end 
// d[ 4 ]
initial
begin
	d[4] = 1'b1;
	d[4] = #160000 1'b0;
	d[4] = #80000 1'b1;
	d[4] = #160000 1'b0;
	d[4] = #480000 1'b1;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b1;
	d[3] = #80000 1'b0;
	d[3] = #80000 1'b1;
	d[3] = #160000 1'b0;
	d[3] = #80000 1'b1;
	d[3] = #80000 1'b0;
	d[3] = #80000 1'b1;
	d[3] = #320000 1'b0;
	d[3] = #80000 1'b1;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b1;
	d[2] = #80000 1'b0;
	d[2] = #80000 1'b1;
	d[2] = #240000 1'b0;
	d[2] = #80000 1'b1;
	d[2] = #80000 1'b0;
	d[2] = #160000 1'b1;
	d[2] = #80000 1'b0;
	d[2] = #160000 1'b1;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b1;
	d[1] = #240000 1'b0;
	d[1] = #160000 1'b1;
	d[1] = #80000 1'b0;
	d[1] = #80000 1'b1;
	d[1] = #80000 1'b0;
	d[1] = #160000 1'b1;
	d[1] = #80000 1'b0;
	d[1] = #80000 1'b1;
end 
// d[ 0 ]
initial
begin
	d[0] = 1'b0;
	d[0] = #320000 1'b1;
	d[0] = #80000 1'b0;
	d[0] = #80000 1'b1;
	d[0] = #80000 1'b0;
	d[0] = #240000 1'b1;
	d[0] = #160000 1'b0;
end 

// clr
initial
begin
	clr = 1'b0;
end 

// first
initial
begin
	first = 1'b1;
end 

// en
initial
begin
	en = 1'b1;
end 
endmodule

